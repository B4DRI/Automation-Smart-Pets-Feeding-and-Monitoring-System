//servo motor only
//the timer feature not complete yet

#include <ESP8266WiFi.h>
#include <BlynkSimpleEsp8266.h>
#include <Servo.h>

// Replace with your Blynk device authentication token
char auth[] = "yl8wiZVgcc8SgsNb_H4MNJLb3qNti1Hw";

// Replace with your WiFi credentials
char ssid[] = "mahazirramlee69@unifi";
char pass[] = "mahazir2515";

Servo myServo;
const int servoPin = 16;  // GPIO16

int timerDuration = 0;          // Timer duration in seconds
bool useTimer = false;          // Flag to choose between timer and direct control
bool timerStarted = false;      // Indicates if the timer has started
unsigned long startTime = 0;     // Timestamp when the timer started

// Define the action stages for the servo movement
enum ActionStage { IDLE, MOVING_TO_90, HOLDING_90, MOVING_TO_0 };
ActionStage actionStage = IDLE;
unsigned long actionStartTime = 0;  // Timestamp for action stages

void setup() {
  Serial.begin(115200);              // Initialize Serial for debugging
  myServo.attach(servoPin);
  myServo.write(0);                   // Initialize the servo position to 0 degrees
  Blynk.begin(auth, ssid, pass);
  Serial.println("Setup complete.");
}

void loop() {
  Blynk.run();  // Run Blynk processes

  // Timer Handling
  if (useTimer && timerStarted && actionStage == IDLE) {
    unsigned long elapsedTime = millis() - startTime;
    if (elapsedTime >= (unsigned long)(timerDuration * 1000)) {  // Convert seconds to milliseconds
      // Trigger the servo to move to 90 degrees
      actionStage = MOVING_TO_90;
      myServo.write(90);
      Serial.println("Timer triggered: Moving servo to 90 degrees.");
      actionStartTime = millis();  // Record the time when action started
    }
  }

  // Handle Servo Action Stages
  switch (actionStage) {
    case MOVING_TO_90:
      // Assuming the servo moves instantly; proceed to holding
      actionStage = HOLDING_90;
      actionStartTime = millis();  // Start holding time
      break;

    case HOLDING_90:
      if (millis() - actionStartTime >= 1000) {  // Hold for 1 second (1000 ms)
        actionStage = MOVING_TO_0;
        myServo.write(0);
        Serial.println("Holding for 1 second: Moving servo back to 0 degrees.");
        actionStartTime = millis();  // Record the time when moving back
      }
      break;

    case MOVING_TO_0:
      // Assuming the servo moves instantly; reset the action
      actionStage = IDLE;
      timerStarted = false;  // Reset the timer flag
      Serial.println("Servo movement completed. Timer reset.");
      break;

    case IDLE:
    default:
      // No action needed
      break;
  }
}

// Blynk function to control the servo motor using a switch (V1)
BLYNK_WRITE(V1) {
  int switchState = param.asInt();  // Get the switch state (0 or 1)
  Serial.print("V1 switch state: ");
  Serial.println(switchState);

  if (switchState == 1) {
    myServo.write(90);  // Move the servo to 90 degrees when the switch is ON
    Serial.println("V1: Servo moved to 90 degrees.");
  } else {
    myServo.write(0);   // Move the servo back to 0 degrees when the switch is OFF
    Serial.println("V1: Servo moved to 0 degrees.");
  }
}

// Blynk function to set the timer duration using the slider (V2)
BLYNK_WRITE(V2) {
  timerDuration = param.asInt();  // Get the slider value in seconds
  Serial.print("V2: Timer duration set to ");
  Serial.print(timerDuration);
  Serial.println(" seconds.");
}

// Blynk function to choose between using the timer or the switch (V3)
BLYNK_WRITE(V3) {
  useTimer = param.asInt() == 1;  // Set useTimer to true if the button is pressed
  Serial.print("V3: Use timer set to ");
  Serial.println(useTimer ? "ON" : "OFF");
}

// Blynk function to start or stop the timer using a switch (V4)
BLYNK_WRITE(V4) {
  int switchState = param.asInt();  // Get the switch state (0 or 1)
  Serial.print("V4 switch state: ");
  Serial.println(switchState);

  if (useTimer) {
    if (switchState == 1 && !timerStarted) {  // Start the timer
      startTime = millis();
      timerStarted = true;
      Serial.println("V4: Timer started.");
    }
    else if (switchState == 0 && timerStarted) {  // Stop the timer
      timerStarted = false;
      actionStage = IDLE;  // Reset any ongoing action
      Serial.println("V4: Timer stopped.");
    }
  }
}
